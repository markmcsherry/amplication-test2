/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLinkArgs } from "./CreateLinkArgs";
import { UpdateLinkArgs } from "./UpdateLinkArgs";
import { DeleteLinkArgs } from "./DeleteLinkArgs";
import { LinkFindManyArgs } from "./LinkFindManyArgs";
import { LinkFindUniqueArgs } from "./LinkFindUniqueArgs";
import { Link } from "./Link";
import { LinkService } from "../link.service";

@graphql.Resolver(() => Link)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class LinkResolverBase {
  constructor(
    protected readonly service: LinkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Link",
    action: "read",
    possession: "any",
  })
  async _linksMeta(
    @graphql.Args() args: LinkFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Link])
  @nestAccessControl.UseRoles({
    resource: "Link",
    action: "read",
    possession: "any",
  })
  async links(@graphql.Args() args: LinkFindManyArgs): Promise<Link[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Link, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Link",
    action: "read",
    possession: "own",
  })
  async link(@graphql.Args() args: LinkFindUniqueArgs): Promise<Link | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Link)
  @nestAccessControl.UseRoles({
    resource: "Link",
    action: "create",
    possession: "any",
  })
  async createLink(@graphql.Args() args: CreateLinkArgs): Promise<Link> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Link)
  @nestAccessControl.UseRoles({
    resource: "Link",
    action: "update",
    possession: "any",
  })
  async updateLink(@graphql.Args() args: UpdateLinkArgs): Promise<Link | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Link)
  @nestAccessControl.UseRoles({
    resource: "Link",
    action: "delete",
    possession: "any",
  })
  async deleteLink(@graphql.Args() args: DeleteLinkArgs): Promise<Link | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
